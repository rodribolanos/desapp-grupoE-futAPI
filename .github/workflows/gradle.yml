name: Java CI with Gradle

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # Gradlew permissions
      - name: Give gradlew permissions
        run: chmod +x ./gradlew

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configuración de Gradle con cache
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      # Compilación + tests + reporte de coverage
      # Usamos 'clean' para asegurar que los tests se corran de cero
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build jacocoTestReport
        
      - name: Upload JaCoCo HTML Report for Debugging
        uses: actions/upload-artifact@v4
        if: always() # Sube el reporte incluso si los pasos siguientes fallan
        with:
          name: jacoco-html-report
          path: build/reports/jacoco/test/html/
      
      # El script de validación ROBUSTO (maneja división por cero)
      - name: Validate Coverage Manually
        run: |
          echo "Validating JaCoCo coverage..."
          MINIMUM_COVERAGE=70
          REPORT_FILE="build/reports/jacoco/test/jacocoTestReport.xml"

          if [ ! -f "$REPORT_FILE" ]; then
            echo "Error: JaCoCo report file not found at $REPORT_FILE"
            exit 1
          fi

          # 2. Extraer el porcentaje (manejando el caso 0/0)
          RAW_COVERAGE=$(awk -F'"' '/<counter type="LINE"/{ 
            total = $4 + $6; 
            if (total == 0) { 
              print 0 
            } else { 
              print $6 / total * 100 
            } 
          }' "$REPORT_FILE")

          COVERAGE_PERCENTAGE=${RAW_COVERAGE:-0}

          echo "Coverage found: $COVERAGE_PERCENTAGE%"
          echo "Minimum required: $MINIMUM_COVERAGE%"

          # 3. Comparar
          IS_BELOW_THRESHOLD=$(awk -v coverage="$COVERAGE_PERCENTAGE" -v min="$MINIMUM_COVERAGE" 'BEGIN { print (coverage < min) }')

          if [ "$IS_BELOW_THRESHOLD" -eq 1 ]; then
            echo "Error: Code coverage is $COVERAGE_PERCENTAGE%, which is below the required $MINIMUM_COVERAGE%."
            exit 1 # <--- ¡Esto hace que el build falle!
          else
            echo "Coverage check passed."
          fi
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./build/reports/jacoco/test/jacocoTestReport.xml
          
  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

